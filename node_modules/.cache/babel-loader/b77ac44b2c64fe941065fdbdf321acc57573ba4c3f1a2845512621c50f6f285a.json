{"ast":null,"code":"import axios from 'axios';\nimport { getMockResponse } from '../mock/responses';\n\n// Set your backend API URL here (use empty string for mock mode)\nconst API_BASE_URL = ''; // Change to 'http://localhost:8000' when backend is ready\n\nexport const sendMessage = async message => {\n  // Mock mode - returns local responses\n  if (!API_BASE_URL) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          response: getMockResponse(message)\n        });\n      }, 1000); // Simulate network delay\n    });\n  }\n\n  // Real API mode\n  try {\n    const response = await axios.post(`${API_BASE_URL}/chat`, {\n      message: message\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error connecting to API:', error);\n    return {\n      response: \"⚠️ Connection error. Using simulated responses.\\n\\n\" + getMockResponse(message)\n    };\n  }\n};","map":{"version":3,"names":["axios","getMockResponse","API_BASE_URL","sendMessage","message","Promise","resolve","setTimeout","response","post","data","error","console"],"sources":["/home/dell/Documents/chatbot/secutalk-chatbot/src/api/chatService.js"],"sourcesContent":["import axios from 'axios';\nimport { getMockResponse } from '../mock/responses';\n\n// Set your backend API URL here (use empty string for mock mode)\nconst API_BASE_URL = ''; // Change to 'http://localhost:8000' when backend is ready\n\nexport const sendMessage = async (message) => {\n  // Mock mode - returns local responses\n  if (!API_BASE_URL) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({ response: getMockResponse(message) });\n      }, 1000); // Simulate network delay\n    });\n  }\n\n  // Real API mode\n  try {\n    const response = await axios.post(`${API_BASE_URL}/chat`, {\n      message: message,\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error connecting to API:', error);\n    return {\n      response: \"⚠️ Connection error. Using simulated responses.\\n\\n\" + \n               getMockResponse(message)\n    };\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,eAAe,QAAQ,mBAAmB;;AAEnD;AACA,MAAMC,YAAY,GAAG,EAAE,CAAC,CAAC;;AAEzB,OAAO,MAAMC,WAAW,GAAG,MAAOC,OAAO,IAAK;EAC5C;EACA,IAAI,CAACF,YAAY,EAAE;IACjB,OAAO,IAAIG,OAAO,CAACC,OAAO,IAAI;MAC5BC,UAAU,CAAC,MAAM;QACfD,OAAO,CAAC;UAAEE,QAAQ,EAAEP,eAAe,CAACG,OAAO;QAAE,CAAC,CAAC;MACjD,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACZ,CAAC,CAAC;EACJ;;EAEA;EACA,IAAI;IACF,MAAMI,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,GAAGP,YAAY,OAAO,EAAE;MACxDE,OAAO,EAAEA;IACX,CAAC,CAAC;IACF,OAAOI,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,OAAO;MACLH,QAAQ,EAAE,qDAAqD,GACtDP,eAAe,CAACG,OAAO;IAClC,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}