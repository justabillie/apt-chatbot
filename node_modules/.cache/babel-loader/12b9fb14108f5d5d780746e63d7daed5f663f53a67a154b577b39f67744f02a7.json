{"ast":null,"code":"import axios from'axios';import{getMockResponse}from'../mock/responses';// Set your backend API URL here (use empty string for mock mode)\nconst API_BASE_URL='';// Change to 'http://localhost:8000' when backend is ready\nexport const sendMessage=async message=>{// Mock mode - returns local responses\nif(!API_BASE_URL){return new Promise(resolve=>{setTimeout(()=>{resolve({response:getMockResponse(message)});},1000);// Simulate network delay\n});}// Real API mode\ntry{const response=await axios.post(\"\".concat(API_BASE_URL,\"/chat\"),{message:message});return response.data;}catch(error){console.error('Error connecting to API:',error);return{response:\"⚠️ Connection error. Using simulated responses.\\n\\n\"+getMockResponse(message)};}};","map":{"version":3,"names":["axios","getMockResponse","API_BASE_URL","sendMessage","message","Promise","resolve","setTimeout","response","post","concat","data","error","console"],"sources":["/home/dell/Documents/chatbot/secutalk-chatbot/src/api/chatService.js"],"sourcesContent":["import axios from 'axios';\nimport { getMockResponse } from '../mock/responses';\n\n// Set your backend API URL here (use empty string for mock mode)\nconst API_BASE_URL = ''; // Change to 'http://localhost:8000' when backend is ready\n\nexport const sendMessage = async (message) => {\n  // Mock mode - returns local responses\n  if (!API_BASE_URL) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({ response: getMockResponse(message) });\n      }, 1000); // Simulate network delay\n    });\n  }\n\n  // Real API mode\n  try {\n    const response = await axios.post(`${API_BASE_URL}/chat`, {\n      message: message,\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error connecting to API:', error);\n    return {\n      response: \"⚠️ Connection error. Using simulated responses.\\n\\n\" + \n               getMockResponse(message)\n    };\n  }\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,eAAe,KAAQ,mBAAmB,CAEnD;AACA,KAAM,CAAAC,YAAY,CAAG,EAAE,CAAE;AAEzB,MAAO,MAAM,CAAAC,WAAW,CAAG,KAAO,CAAAC,OAAO,EAAK,CAC5C;AACA,GAAI,CAACF,YAAY,CAAE,CACjB,MAAO,IAAI,CAAAG,OAAO,CAACC,OAAO,EAAI,CAC5BC,UAAU,CAAC,IAAM,CACfD,OAAO,CAAC,CAAEE,QAAQ,CAAEP,eAAe,CAACG,OAAO,CAAE,CAAC,CAAC,CACjD,CAAC,CAAE,IAAI,CAAC,CAAE;AACZ,CAAC,CAAC,CACJ,CAEA;AACA,GAAI,CACF,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAAR,KAAK,CAACS,IAAI,IAAAC,MAAA,CAAIR,YAAY,UAAS,CACxDE,OAAO,CAAEA,OACX,CAAC,CAAC,CACF,MAAO,CAAAI,QAAQ,CAACG,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAChD,MAAO,CACLJ,QAAQ,CAAE,qDAAqD,CACtDP,eAAe,CAACG,OAAO,CAClC,CAAC,CACH,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}